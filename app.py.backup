"""
Enhanced Database Copilot with Multi-Table Support and Structured Display
Complete version with production + wells data and professional table display.
Real NY DEC data analysis with AI-powered queries.
PRODUCTION-READY: Supports both local development and Streamlit Cloud deployment.
"""

import streamlit as st
import sys
import os
import pandas as pd
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from app_utils.database import db_manager
    from app_utils.ai_assistant import MultiTableDatabaseAssistant
except ImportError as e:
    st.error(f"Import error: {e}")
    st.error("Please ensure all files are in the correct directory structure.")
    st.stop()


def initialize_app():
    """Initialize the application and database connection."""
    st.set_page_config(
        page_title="Database Copilot - Enhanced",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Apply custom CSS for professional styling
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    
    .feature-highlight {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        border-left: 4px solid #2196F3;
    }
    
    .status-connected {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        padding: 0.8rem;
        border-radius: 8px;
        text-align: center;
        margin-bottom: 1rem;
    }
    
    .status-disconnected {
        background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
        color: white;
        padding: 0.8rem;
        border-radius: 8px;
        text-align: center;
        margin-bottom: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Initialize session state
    if 'db_connected' not in st.session_state:
        st.session_state.db_connected = False
    if 'assistant' not in st.session_state:
        st.session_state.assistant = None
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'schema_discovered' not in st.session_state:
        st.session_state.schema_discovered = False


def show_debug_panel():
    """Debug panel to show configuration status - REMOVE AFTER TESTING"""
    with st.sidebar.expander("üîß Debug Configuration", expanded=True):
        st.write("**Configuration Debug Info:**")
        
        debug_info = db_manager.get_debug_info()
        for key, value in debug_info.items():
            if value == 'Not Set' or value == 'None' or value == 'Not Connected':
                st.write(f"‚ùå {key}: {value}")
            elif 'Connected' in value or 'Available' in value or value == 'True':
                st.write(f"‚úÖ {key}: {value}")
            else:
                st.write(f"‚ÑπÔ∏è {key}: {value}")
        
        # Show file system info for SQLite
        if debug_info.get('Database Type', '').lower() == 'sqlite':
            db_name = db_manager._get_config_value('DATABASE_NAME')
            if db_name:
                st.write(f"\n**File System Check:**")
                
                import os
                from pathlib import Path
                
                # Check possible paths
                current_dir = os.getcwd()
                project_root = Path(__file__).parent if hasattr(Path(__file__), 'parent') else Path('.')
                
                possible_paths = [
                    db_name,
                    os.path.join(current_dir, db_name),
                    f"/mount/src/database-copilot/{db_name}",
                    os.path.join(project_root, db_name)
                ]
                
                for path in possible_paths:
                    exists = os.path.exists(path)
                    icon = "‚úÖ" if exists else "‚ùå"
                    size = ""
                    if exists:
                        try:
                            size = f" ({os.path.getsize(path):,} bytes)"
                        except:
                            size = ""
                    st.write(f"{icon} `{path}`{size}")
        
        # Show configuration sources
        st.write("\n**Configuration Sources:**")
        import os
        
        # Check environment variables
        env_vars = ['DATABASE_TYPE', 'DATABASE_NAME', 'OPENAI_API_KEY']
        st.write("*Environment Variables:*")
        for var in env_vars:
            value = os.getenv(var, 'Not Set')
            if var == 'OPENAI_API_KEY' and value != 'Not Set':
                value = f"{value[:8]}..." if len(value) > 8 else "Set"
            st.write(f"- {var}: {value}")
        
        # Check Streamlit secrets
        st.write("*Streamlit Secrets:*")
        try:
            if hasattr(st, 'secrets'):
                for var in env_vars:
                    if var in st.secrets:
                        value = str(st.secrets[var])
                        if var == 'OPENAI_API_KEY' and value:
                            value = f"{value[:8]}..." if len(value) > 8 else "Set"
                        st.write(f"- {var}: {value}")
                    else:
                        st.write(f"- {var}: Not Set")
            else:
                st.write("Streamlit secrets not available")
        except Exception as e:
            st.write(f"Error checking secrets: {str(e)}")


def connect_to_database():
    """Handle database connection with enhanced UI."""
    with st.sidebar:
        st.header("üîå Database Connection")
        
        if not st.session_state.db_connected:
            st.markdown("""
            <div class="status-disconnected">
                <h4>‚ö†Ô∏è Not Connected</h4>
                <p>Connect to access enhanced features</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("üîó Connect to Enhanced Database", type="primary", use_container_width=True):
                with st.spinner("Connecting to NY DEC database..."):
                    success = db_manager.connect()
                    
                if success:
                    st.session_state.db_connected = True
                    st.session_state.assistant = MultiTableDatabaseAssistant(db_manager)
                    st.success("‚úÖ Connected to real NY DEC data!")
                    st.rerun()
                else:
                    st.error("‚ùå Connection failed. Check your database configuration.")
        else:
            st.markdown("""
            <div class="status-connected">
                <h4>‚úÖ Connected</h4>
                <p>NY DEC Production + Wells Data</p>
            </div>
            """, unsafe_allow_html=True)
            
            if st.button("üîÑ Refresh Connection", use_container_width=True):
                db_manager.close()
                st.session_state.db_connected = False
                st.session_state.assistant = None
                st.session_state.schema_discovered = False
                st.rerun()


def discover_schema():
    """Handle schema discovery with enhanced display."""
    if st.session_state.db_connected and not st.session_state.schema_discovered:
        with st.sidebar:
            st.header("üìä Database Analysis")
            
            if st.button("üîç Analyze Database Schema", use_container_width=True):
                with st.spinner("Analyzing NY DEC database structure..."):
                    try:
                        tables = db_manager.discover_schema()
                        st.session_state.schema_discovered = True
                        st.success(f"‚úÖ Analyzed {len(tables)} tables")
                        st.rerun()
                    except Exception as e:
                        st.error(f"Schema analysis failed: {str(e)}")
    
    elif st.session_state.schema_discovered:
        with st.sidebar:
            st.header("üìä NY DEC Database")
            
            # Show enhanced table information
            tables = list(db_manager.schema_cache.values())
            
            # Database statistics
            total_records = sum(table.row_count or 0 for table in tables)
            
            st.markdown(f"""
            <div class="metric-card">
                <h3>{total_records:,}</h3>
                <p>Total Records</p>
            </div>
            """, unsafe_allow_html=True)
            
            with st.expander(f"üìã Tables ({len(tables)})", expanded=True):
                for table in tables:
                    if table.name == 'production':
                        icon = "üìà"
                        desc = "Monthly production data (2020-2024)"
                        color = "#4CAF50"
                    elif table.name == 'wells':
                        icon = "üõ¢Ô∏è"
                        desc = "Complete well registry & technical data"
                        color = "#2196F3"
                    else:
                        icon = "üìä"
                        desc = "Data table"
                        color = "#666"
                    
                    st.markdown(f"""
                    <div style="padding: 0.5rem; margin-bottom: 0.5rem; border-left: 3px solid {color}; background-color: #f8f9fa;">
                        <strong>{icon} {table.name}</strong><br>
                        <span style="color: #666; font-size: 0.9rem;">{table.row_count:,} records</span><br>
                        <span style="color: #888; font-size: 0.8rem;">{desc}</span>
                    </div>
                    """, unsafe_allow_html=True)
            
            # Show enhanced capabilities
            with st.expander("üéØ Enhanced Capabilities", expanded=False):
                capabilities = [
                    "‚úÖ Real NY DEC production data (2020-2024)",
                    "‚úÖ Complete well registry (47K+ wells)",
                    "‚úÖ Cross-dataset analysis & JOINs",
                    "‚úÖ AI-powered SQL generation",
                    "‚úÖ Professional table display",
                    "‚úÖ CSV export functionality"
                ]
                for cap in capabilities:
                    st.write(cap)


def enhanced_chat_interface():
    """Enhanced chat interface with professional table display."""
    if not st.session_state.db_connected:
        st.warning("Please connect to your database first using the sidebar.")
        return
    
    if not st.session_state.schema_discovered:
        st.info("üí° Tip: Click 'Analyze Database Schema' in the sidebar to unlock enhanced features.")
    
    # Enhanced header
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ Database Copilot</h1>
        <p>AI-Powered Analysis of NY DEC Oil & Gas Data</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("Ask questions about **production data** and **well information** from the NY Department of Environmental Conservation. I can analyze both datasets together and show results as professional tables!")
    
    # Enhanced example questions organized by category
    with st.expander("üí° Enhanced Query Examples", expanded=True):
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìà Production Analysis")
            production_examples = [
                "Show me the top 10 producing wells in 2024",
                "What was the total gas production by county?",
                "Compare oil vs gas production for all wells",
                "Which operators had the highest production in 2023?"
            ]
            
            for i, example in enumerate(production_examples):
                if st.button(example, key=f"prod_{i}", use_container_width=True):
                    st.session_state.current_question = example
        
        with col2:
            st.markdown("### üõ¢Ô∏è Cross-Dataset Analysis")
            cross_examples = [
                "Show production for horizontal wells in Broome County",
                "Which wells have the highest production and what are their depths?",
                "Compare production by formation type",
                "Show all active wells with their 2024 production totals"
            ]
            
            for i, example in enumerate(cross_examples):
                if st.button(example, key=f"cross_{i}", use_container_width=True):
                    st.session_state.current_question = example
    
    # Chat history display with enhanced formatting
    chat_container = st.container()
    
    with chat_container:
        for i, (question, response_data) in enumerate(st.session_state.chat_history):
            # User question
            with st.chat_message("user"):
                st.write(question)
            
            # Assistant response with enhanced display
            with st.chat_message("assistant"):
                # Always show the conversational text
                st.write(response_data['text'])
                
                # Show table if available with enhanced formatting
                if response_data.get('table_data') is not None:
                    df = response_data['table_data']
                    title = response_data.get('table_title', 'Results')
                    
                    st.markdown(f"### üìä {title}")
                    
                    # Display the table with enhanced formatting
                    if len(df) > 0:
                        # Format display data for professional presentation
                        display_df = df.copy()
                        
                        # Enhanced formatting for oil & gas data
                        for col in display_df.columns:
                            col_lower = col.lower()
                            # Format production numbers
                            if any(prod in col_lower for prod in ['prod', 'total', 'gas', 'oil', 'water', 'mcf', 'bbl']):
                                if display_df[col].dtype in ['int64', 'float64']:
                                    display_df[col] = display_df[col].apply(
                                        lambda x: f"{x:,}" if pd.notnull(x) and x != 0 else "0"
                                    )
                            # Format depths with units
                            elif 'depth' in col_lower and display_df[col].dtype in ['int64', 'float64']:
                                display_df[col] = display_df[col].apply(
                                    lambda x: f"{x:,.0f} ft" if pd.notnull(x) and x > 0 else "N/A"
                                )
                            # Format ratios
                            elif 'ratio' in col_lower and display_df[col].dtype in ['float64']:
                                display_df[col] = display_df[col].apply(
                                    lambda x: f"{x:.4f}" if pd.notnull(x) else "N/A"
                                )
                        
                        # Professional table display
                        st.dataframe(
                            display_df,
                            use_container_width=True,
                            hide_index=True,
                            height=400
                        )
                        
                        # Enhanced table information
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("Records", len(df))
                        with col2:
                            st.metric("Columns", len(df.columns))
                        with col3:
                            if len(df) > 10:
                                st.info("Click column headers to sort")
                            else:
                                st.success("Complete results")
                        
                        # Professional export option
                        csv = df.to_csv(index=False)
                        st.download_button(
                            label="üì• Export to CSV",
                            data=csv,
                            file_name=f"ny_dec_query_results_{i+1}.csv",
                            mime="text/csv",
                            key=f"download_{i}",
                            use_container_width=True
                        )
                    else:
                        st.info("Query executed successfully but returned no data.")
    
    # Enhanced question input
    question = st.chat_input("Ask a question about NY DEC production or wells data...")
    
    # Handle example button clicks
    if 'current_question' in st.session_state:
        question = st.session_state.current_question
        del st.session_state.current_question
    
    if question:
        # Add user question to chat immediately for better UX
        with chat_container:
            with st.chat_message("user"):
                st.write(question)
        
        # Generate and show response with professional handling
        with chat_container:
            with st.chat_message("assistant"):
                with st.spinner("üß† Analyzing NY DEC database..."):
                    try:
                        # Get enhanced response (with potential table data)
                        response_data = st.session_state.assistant.ask_question(question)
                        
                        # Display conversational response
                        st.write(response_data['text'])
                        
                        # Display table if present with enhanced formatting
                        if response_data.get('table_data') is not None:
                            df = response_data['table_data']
                            title = response_data.get('table_title', 'Query Results')
                            
                            st.markdown(f"### üìä {title}")
                            
                            if len(df) > 0:
                                # Professional data formatting
                                display_df = df.copy()
                                
                                # Enhanced formatting for oil & gas industry data
                                for col in display_df.columns:
                                    col_lower = col.lower()
                                    # Format production numbers with industry standards
                                    if any(prod in col_lower for prod in ['prod', 'total', 'gas', 'oil', 'water', 'mcf', 'bbl']):
                                        if display_df[col].dtype in ['int64', 'float64']:
                                            display_df[col] = display_df[col].apply(
                                                lambda x: f"{x:,}" if pd.notnull(x) and x != 0 else "0"
                                            )
                                    # Format depths with units
                                    elif 'depth' in col_lower and display_df[col].dtype in ['int64', 'float64']:
                                        display_df[col] = display_df[col].apply(
                                            lambda x: f"{x:,.0f} ft" if pd.notnull(x) and x > 0 else "N/A"
                                        )
                                    # Format counts
                                    elif 'count' in col_lower and display_df[col].dtype in ['int64']:
                                        display_df[col] = display_df[col].apply(
                                            lambda x: f"{x:,}" if pd.notnull(x) else "0"
                                        )
                                
                                # Professional table display
                                st.dataframe(
                                    display_df,
                                    use_container_width=True,
                                    hide_index=True,
                                    height=400
                                )
                                
                                # Professional metrics display
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    st.metric("üìä Records", len(df))
                                with col2:
                                    st.metric("üìã Columns", len(df.columns))
                                with col3:
                                    if len(df) > 10:
                                        st.info("Sortable columns")
                                    else:
                                        st.success("Complete dataset")
                                
                                # Professional export
                                csv = df.to_csv(index=False)
                                st.download_button(
                                    label="üì• Export Results to CSV",
                                    data=csv,
                                    file_name="ny_dec_analysis_results.csv",
                                    mime="text/csv",
                                    use_container_width=True
                                )
                            else:
                                st.info("Query completed successfully but returned no matching records.")
                        
                        # Add to chat history
                        st.session_state.chat_history.append((question, response_data))
                        
                    except Exception as e:
                        error_msg = f"I encountered an error while analyzing the data: {str(e)}"
                        st.error(error_msg)
                        
                        # Add error to history for continuity
                        error_response = {
                            'text': error_msg,
                            'table_data': None,
                            'table_title': None
                        }
                        st.session_state.chat_history.append((question, error_response))


def configuration_panel():
    """Show configuration status and enhanced features safely."""
    with st.sidebar:
        st.header("‚öôÔ∏è System Status")
        
        # Check non-sensitive configuration
        env_vars = {
            "Database": db_manager._get_config_value('DATABASE_NAME'),
            "Database Type": db_manager._get_config_value('DATABASE_TYPE')
        }
        
        for var_name, var_value in env_vars.items():
            if var_value:
                st.success(f"‚úÖ {var_name}")
            else:
                st.error(f"‚ùå {var_name}")
        
        # Show AI status safely (without exposing keys)
        ai_enabled = False
        try:
            if hasattr(st, 'secrets') and 'OPENAI_API_KEY' in st.secrets:
                ai_enabled = True
        except:
            pass
        
        if not ai_enabled:
            api_key = db_manager._get_config_value('OPENAI_API_KEY')
            if api_key and api_key != 'your_openai_api_key_here':
                ai_enabled = True
        
        if ai_enabled:
            st.success("‚úÖ AI Analysis Enabled")
        else:
            st.warning("‚ö†Ô∏è AI Features Limited")
        
        # Enhanced features status
        st.markdown("---")
        st.markdown("### üéØ Professional Features")
        
        features = [
            ("Multi-table queries", "‚úÖ"),
            ("NY DEC Production data", "‚úÖ"), 
            ("NY DEC Wells registry", "‚úÖ"),
            ("Cross-dataset analysis", "‚úÖ"),
            ("Professional tables", "‚úÖ"),
            ("CSV export", "‚úÖ"),
            ("Real industry data", "‚úÖ")
        ]
        
        for feature, status in features:
            st.write(f"{status} {feature}")


def main():
    """Enhanced main application entry point."""
    initialize_app()
    
    # Enhanced sidebar header
    st.sidebar.markdown("# üöÄ Database Copilot")
    st.sidebar.markdown("*NY DEC Oil & Gas Data Analysis*")
    st.sidebar.markdown("---")
    
    # DEBUG PANEL - REMOVE THIS LINE AFTER TESTING
    show_debug_panel()
    
    # Core application components
    connect_to_database()
    discover_schema()
    configuration_panel()
    
    # Main enhanced chat interface
    enhanced_chat_interface()
    
    # Professional footer with database statistics
    st.markdown("---")
    company_name = db_manager._get_config_value('COMPANY_NAME', 'NY DEC Data Analysis')
    st.markdown(f"**Enhanced Database Copilot** - AI-powered analysis of real NY DEC oil & gas data for {company_name}")
    
    # Show live statistics if connected
    if st.session_state.db_connected and st.session_state.schema_discovered:
        tables = list(db_manager.schema_cache.values())
        total_records = sum(table.row_count or 0 for table in tables)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Database Tables", len(tables))
        with col2:
            st.metric("Total Records", f"{total_records:,}")
        with col3:
            st.metric("Data Span", "2020-2024")
        
        st.caption("Real NY Department of Environmental Conservation production and wells data ‚Ä¢ Enhanced multi-table analysis capabilities")


if __name__ == "__main__":
    main()